name: Jekyll Build & FTP Site
# Run on pushes to the master branch
on: 
  push:
    branches:
      - main
      - dev
      - dev-*
# env:
#   ftp_dir: ${{ github.ref == 'refs/heads/main' && secrets.FTP_LOCATION || format("{0}/{1}", secrets.FTP_LOCATION, github.ref.name ) }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.7'
    # Install the gems in the gemfile & install ncftp
    - name: Setup Environment.
      run: |
        cd site
        bundle install
    
    # Build the site
    - name: Build Site with Jekyll.
      run: |
        cd site
        JEKYLL_ENV=production bundle exec jekyll build
        tar -czvf site.tar.gz /home/runner/work/adamaverycole.com/adamaverycole.com/site/_site
        ls -al

    # Package and publish artifacts
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        # Artifact name
        # name: artifact # optional, default is artifact
        name: site.tar.gz # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        # path: /home/runner/work/adamaverycole.com/adamaverycole.com/site/_site
        path: site.tar.gz
        # The desired behavior if no files are found using the provided path.
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
        # if-no-files-found: # optional, default is warn
        # Duration after which artifact will expire in days. 0 means using default retention.
        # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.    
        retention-days: 90 # optional
        # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
        compression-level: 0 # optional, default is 6
        # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.
        # overwrite: # optional, default is false
        # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.
        include-hidden-files: false # optional, default is false

  release-dev:
    needs: [build]
    environment:
      name: dev
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Dev
    runs-on: ubuntu-latest
    steps:
      # Install the gems in the gemfile & install ncftp
      - name: Setup Environment.
        run: |
          sudo apt-get install -y ncftp
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.8
        # with:
          # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
          # name:  # optional
          # Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
          # path: # optional
          # A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.
          # pattern: # optional
          # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
          # merge-multiple: # optional, default is false
          # The GitHub token used to authenticate with the GitHub API. This is required when downloading artifacts from a different repository or from a different workflow run. If this is not specified, the action will attempt to download artifacts from the current repository and the current workflow run.
          # github-token: # optional
          # The repository owner and the repository name joined together by "/". If github-token is specified, this is the repository that artifacts will be downloaded from.
          # repository: # optional, default is ${{ github.repository }}
          # The id of the workflow run where the desired download artifact was uploaded from. If github-token is specified, this is the run that artifacts will be downloaded from.
          # run-id: # optional, default is ${{ github.run_id }}
      
      
      # Looks kind of complicated but just uploads the content of _site folder to the ftp server. It does not upload the _site folder itself.
      - name: Upload site to FTP.
        env: 
          ftp_location: ${{ secrets.FTP_LOCATION }} # Pass in required secrets.
          ftp_username: ${{ secrets.FTP_USERNAME }}
          ftp_password: ${{ secrets.FTP_PASSWORD }} 
          artifacts_dir: ${{ github.workspace }}
        run: |
          cd $artifacts_dir
          tar -xzvf site.tar.gz ./_site
          ncftpput -R -v -u "$ftp_username" -p "$ftp_password" $ftp_location /dev/ _site/* 

  release-prod:
    needs: [build, release-dev]
    environment:
      name: prod
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Prod
    runs-on: ubuntu-latest
    steps:
      # Install the gems in the gemfile & install ncftp
      - name: Setup Environment.
        run: |
          sudo apt-get install -y ncftp
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.8
        # with:
          # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
          # name:  # optional
          # Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
          # path: # optional
          # A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.
          # pattern: # optional
          # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
          # merge-multiple: # optional, default is false
          # The GitHub token used to authenticate with the GitHub API. This is required when downloading artifacts from a different repository or from a different workflow run. If this is not specified, the action will attempt to download artifacts from the current repository and the current workflow run.
          # github-token: # optional
          # The repository owner and the repository name joined together by "/". If github-token is specified, this is the repository that artifacts will be downloaded from.
          # repository: # optional, default is ${{ github.repository }}
          # The id of the workflow run where the desired download artifact was uploaded from. If github-token is specified, this is the run that artifacts will be downloaded from.
          # run-id: # optional, default is ${{ github.run_id }}
          
      # Looks kind of complicated but just uploads the content of _site folder to the ftp server. It does not upload the _site folder itself.
      - name: Upload site to FTP.
        env: 
          ftp_location: ${{ secrets.FTP_LOCATION }} # Pass in required secrets.
          ftp_username: ${{ secrets.FTP_USERNAME }}
          ftp_password: ${{ secrets.FTP_PASSWORD }}  
          artifacts_dir: ${{ github.workspace }}
        run: |
          cd $artifacts_dir
          tar -xzvf site.tar.gz ./_site
          ncftpput -R -v -u "$ftp_username" -p "$ftp_password" $ftp_location / _site/* 
